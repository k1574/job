#!/usr/bin/env python3

import tkinter.filedialog as fd
import tkinter as Tk
import numpy as np
from PIL import Image, ImageTk

class Rgb:
	def __init__(self):
		self.RED = 0
		self.GREEN = 1
		self.BLUE = 2
		self.LUM = 3
		self.COLORS = [self.RED, self.GREEN, self.BLUE]
		self.LUMS = [0.3, 0.59, 0.11]
		self.MAXVAL = 255
		self.FNLIST = [self.R, self.G, self.B, self.L]

	def R(self, px):
		return px[self.RED]
	def G(self, px):
		return px[self.GREEN]
	def B(self, px):
		return px[self.BLUE]

	def L(self, px):
		v = 0
		i = 0
		for l in self.LUMS :
			v += px[i] * l
			i += 1
		return int(v)
	def getRect(self, im, c, w, h):
		l = []
		for i in range(c[1], c[1]+h) :
			for j in range(c[0], c[0]+w):
				l.append(im.getpixel((j, i)))
		return l
	def pxMean(self, pxs):
		ret = [0, 0, 0]
		for px in pxs :
			for i in range(3) :
				ret[i] += px[i]
		for i in range(3) :
			ret[i] /= len(pxs)
		for i in range(3) :
			ret[i] = int(ret[i])
		return tuple(ret)

RGB = Rgb()
class App:
	FirstTime = True
	CursorBorderWidth = 5
	IntensifyVal = 5
	ContrastVal = 5
	ModKey = "<Control-%s>"
	HistoHeight = 100
	HistoWidth = RGB.MAXVAL+1
	def __init__(self):
		self.Root = Tk.Tk()
		self.ConvolveCoreBox = Tk.Text(self.Root, height=1, width=50)
		self.ConvolveCoreBox.pack()	
		self.Add126Var = Tk.IntVar()
		self.MeanValVar = Tk.IntVar()
		self.Add126 = Tk.Checkbutton(text="Add 126", variable=self.Add126Var,
			onvalue=126, offvalue=0)
		self.Add126.pack()
		self.MeanVal = Tk.Checkbutton(text="Mean", variable=self.MeanValVar,
			onvalue=9, offvalue=1)
		self.MeanVal.pack()

		self.Root.bind("<Tab>", lambda a: self.focusScroll())

		# Define main variables.
		self.Image = None
		self.Photo = None
		self.RGB = None
		self.Canvas = None
		self.CurScroll = 0

		self.loadNewImage()

	def Start(self):
		self.Root.mainloop()

	def blur(self):
		self.Image = self.blurRet()
		self.updateImage(self.Image)

	def blurRet(self):
		im = Image.new(mode="RGB", size=self.Image.size)
		sim = self.Image
		w, h = im.size[0], im.size[1]
		for i in range(h-2) :
			i += 1
			for j in range(w-2) :
				j += 1
				rect = RGB.getRect(sim, (j-1, i-1), 3, 3)
				im.putpixel((j, i), RGB.pxMean(rect))
		for i in range(w):
			c1 = (i, 0)
			c2 = (i, h-1)
			im.putpixel(c1, sim.getpixel(c1))
			im.putpixel(c2, sim.getpixel(c2))
		for i in range(h):
			c1 = (0, i)
			c2 = (w-1, i)
			im.putpixel(c1, sim.getpixel(c1))
			im.putpixel(c2, sim.getpixel(c2))
		return im

	def exchangeColorChannels(self, chans):
		c1, c2 = chans[0], chans[1]
		s[c1], s[c2] = s[c2], s[c1]
		self.Image = Image.merge("RGB", tuple(s))
		self.updateImage(self.Image)

	def intensifyColor(self, colors, val):
		s = list(self.Image.split())
		for c in colors :
			s[c] = s[c].point(lambda i: i + val)
		self.Image = Image.merge("RGB", tuple(s))
		self.updateImage(self.Image)

	def negativeColor(self):
		s = list(self.Image.split())
		for c in RGB.COLORS :
			s[c] = s[c].point(lambda v: RGB.MAXVAL - v)
		self.Image = Image.merge("RGB", tuple(s))
		self.updateImage(self.Image)

	def mirrorH(self):
		im = Image.new(mode="RGB", size=self.Image.size)
		w, h = self.Image.size
		for i in range(h) :
			for j in range(w) :
				im.putpixel(
					(j, i),
					self.Image.getpixel((w-j-1, i))
				)
		self.Image = im
		self.updateImage(self.Image)

	def mirrorV(self):
		im = Image.new(mode="RGB", size=self.Image.size)
		w, h = self.Image.size
		for i in range(w) :
			for j in range(h) :
				im.putpixel(
					(i, j),
					self.Image.getpixel(
						(i, h-j-1)
					)
				)
		self.Image = im
		self.updateImage(self.Image)

	def highpassFilter(self):
		blur = self.blurRet()
		b1, b2 = np.asarray(self.Image), np.asarray(blur)
		dif = b1 - b2
		self.Image = Image.fromarray(dif)
		self.updateImage(self.Image)

	def convolve(self):
		meanval = self.MeanValVar.get()
		add256 = self.Add126Var.get()
		core = self.ConvolveCoreBox.get("1.0", Tk.END).split(",")
		core = [float(x) for x in core]
		img = self.Image
		im = Image.new(mode="RGB", size=self.Image.size)
		for i in range(1, img.size[0]-1) :
			for j in range(1, img.size[1]-1) :
				rect = list(RGB.getRect(img, (i-1, j-1), 3, 3))
				ret = [0, 0, 0]
				for c in RGB.COLORS :
					for idx in range(9) :
						ret[c] += int(core[idx] * rect[idx][c])
					ret[c] /= meanval
					ret[c] += add256
					ret[c] = int(ret[c])
				im.putpixel((i, j), tuple(ret))

		self.Image = im
		self.updateImage(im)

	def drawCursorBorder(self, ev):
		cw = self.CursorBorderWidth
		self.Canvas.create_rectangle(
			ev.x - cw,
			ev.y - cw,
			ev.x + cw,
			ev.y + cw,
			tag="cursor"
		)
		self.Canvas.create_rectangle(
			ev.x - cw - 1,
			ev.y - cw - 1,
			ev.x + cw + 1,
			ev.y + cw + 1,
			outline="white",
			tag="cursor"
		)

	def onCanvasMouseMotion(self, ev):
		px = (0, 0, 0)
		try:
			px = self.Image.getpixel((ev.x, ev.y))
		except IndexError:
			pass
		self.Root.title(
			"x:%d y:%d #%02x%02x%02x Intensity:%d%% #%02x%02x%02x  #%02x%02x%02x" \
				% (
					ev.x, ev.y,
					px[0], px[1], px[2],
					int((px[0]+px[1]+px[2])/3/256 * 100),
					px[0]-self.pxMean[0],
					px[1]-self.pxMean[1],
					px[2]-self.pxMean[2],
					(px[0]-self.pxMean[0]) - self.difMean[0],
					(px[1]-self.pxMean[1]) - self.difMean[1],
					(px[2]-self.pxMean[2]) - self.difMean[2]
			)
		)
		self.Canvas.delete("cursor")
		self.drawCursorBorder(ev)
	def buildHistos(self):
		for canvIdx in RGB.COLORS + [RGB.LUM] :
			self.buildHisto(canvIdx)
	def buildHisto(self, canvIdx):
		# Height array.
		canv = self.HistoCanvases[canvIdx]
		img = self.Image
		w, h = self.HistoWidth, self.HistoHeight
		# Empty array.
		ha = [0 for i in range(w) ]

		# Pixels.
		clrs = img.getcolors(
			img.size[0]*img.size[1]
		)

		# Filling array with heights up.
		for n, c in clrs :
			idx = RGB.FNLIST[canvIdx](c)
			ha[idx] += n

		maxx = float(max(ha))
		canv.delete("all")
		for i in range(w) :
			canv.create_line((i, h-1), (i, int(h-ha[i]/maxx*h)))
		
	def updateImage(self, img):
		self.Photo = ImageTk.PhotoImage(img)
		self.CanvasImage = \
			self.Canvas.create_image(0, 0, anchor="nw", image=self.Photo)
		rect = RGB.getRect(img, (0, 0), img.size[0], img.size[1])
		self.pxMean = RGB.pxMean(rect)
		dif = [0, 0, 0]
		for v in rect :
			for i in range(3) :
				dif[i] += (v[i] - self.pxMean[i])**2
		for i in range(3) :
			dif[i] /= len(rect)
			dif[i] **= 0.5
			dif[i] = int(dif[i])
		self.difMean = dif
		self.buildHistos()
			
	def changeContrast(self, level):
		img = self.Image
		mv2 = (RGB.MAXVAL+1)/2
		mv = RGB.MAXVAL
		p = 4
		factor = ((mv+p) * (level + mv)) \
			/ (mv * (mv + p - level))
		def contrast(c):
			value = mv2 + factor * (c - mv2)
			return int(max(0, min(255, value)))
		img = img.point(contrast)
		self.Image = img
		self.updateImage(self.Image)

	def focusScroll(self):
		s = [
			self.Canvas,
			self.ConvolveCoreBox,
			self.Add126,
			self.MeanVal
		]
		set = s[self.CurScroll % len(s)]
		set.grab_set()
		set.focus_set()
		self.CurScroll += 1
	def loadNewImage(self, *args):
		if not self.FirstTime :
			self.Canvas.pack_forget()
			for v in self.HistoCanvases :
				v.pack_forget()
		path = fd.askopenfilename()
		self.Image = Image.open(path).convert("RGB")
		# self.RGB = self.Image.convert("RGB")

		self.Canvas = Tk.Canvas(
			self.Root,
			width=self.Image.size[0],
			height=self.Image.size[1]
		)
			
		self.Canvas.pack()

		# Creating histogram canvases.
		canv = lambda: Tk.Canvas(
			width=self.HistoWidth,
			height=self.HistoHeight
		)
		self.HistoCanvases = []
		for i in range(len(RGB.COLORS + [RGB.LUM])) :
			c = canv()
			self.HistoCanvases.append(c)
			c.pack()

		self.updateImage(self.Image)
		self.Canvas.bind("<Motion>", self.onCanvasMouseMotion)
		if self.FirstTime :
			self.FirstTime = False
			
		self.Canvas.bind("n", self.loadNewImage)
		self.Canvas.bind(self.ModKey % "n",
			lambda a: self.negativeColor())
		self.Canvas.bind("r",
			lambda a: self.intensifyColor([RGB.RED], self.IntensifyVal))
		self.Canvas.bind(self.ModKey % "r",
			lambda a: self.intensifyColor([RGB.RED], -self.IntensifyVal))
		self.Canvas.bind("g",
			lambda a: self.intensifyColor([RGB.GREEN], self.IntensifyVal))
		self.Canvas.bind(self.ModKey % "g",
			lambda a: self.intensifyColor([RGB.GREEN], -self.IntensifyVal))
		self.Canvas.bind("b",
			lambda a: self.intensifyColor([RGB.BLUE], self.IntensifyVal))
		self.Canvas.bind(self.ModKey % "b",
			lambda a: self.intensifyColor([RGB.BLUE], -self.IntensifyVal))
		self.Canvas.bind("l",
			lambda a: self.intensifyColor(RGB.COLORS, self.IntensifyVal))
		self.Canvas.bind(self.ModKey % "l",
			lambda a: self.intensifyColor(RGB.COLORS, -self.IntensifyVal))
		self.Canvas.bind("c", lambda a: self.changeContrast(self.ContrastVal))
		self.Canvas.bind(self.ModKey % "c",
			lambda a: self.changeContrast(-self.ContrastVal)
		)
		
		self.Canvas.bind("y", lambda a: self.convolve())
		self.Canvas.bind("h", lambda a: self.mirrorH())
		self.Canvas.bind(self.ModKey % "h",
			lambda a : self.highpassFilter()
		)
		self.Canvas.bind("v", lambda a: self.mirrorV())
		self.Canvas.bind("1", lambda a: self.exchangeColorChannels([RGB.RED, RGB.GREEN]))
		self.Canvas.bind("2", lambda a: self.exchangeColorChannels([RGB.RED, RGB.BLUE]))
		self.Canvas.bind("3", lambda a: self.exchangeColorChannels([RGB.GREEN, RGB.RED]))
		self.Canvas.bind("4", lambda a: self.exchangeColorChannels([RGB.GREEN, RGB.BLUE]))
		self.Canvas.bind("5", lambda a: self.exchangeColorChannels([RGB.BLUE, RGB.RED]))
		self.Canvas.bind("6", lambda a: self.exchangeColorChannels([RGB.BLUE, RGB.GREEN]))
		self.Canvas.bind("d", lambda a: self.blur())

		self.Canvas.focus()

app = App()
app.Start()

